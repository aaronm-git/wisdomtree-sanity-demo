/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type LinkObject = {
  _type: "link-object";
  linkLabel?: string;
  linkUrl?: string;
};

export type HeroSearchBlock = {
  _type: "hero-search-block";
  heading?: HeadingObject;
  searchLabel?: string;
  showTopPages?: boolean;
  topPages?: TopPagesObject;
  backgroundImage?: ImageObject;
};

export type ImageObject = {
  _type: "image-object";
  imageUrl?: string;
  altText?: string;
};

export type TopPagesObject = {
  _type: "top-pages-object";
  topPages?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
  maxPages?: number;
};

export type HeroVideoBlock = {
  _type: "hero-video-block";
  heading?: HeadingObject;
  videoUrl?: VideoObject;
};

export type VideoObject = {
  _type: "video-object";
  videoLabel?: string;
  thumbnailUrl?: string;
  videoUrl?: string;
};

export type HeadingObject = {
  _type: "heading-object";
  eyebrowText?: string;
  heading?: string;
  subheading?: string;
};

export type TranslationMetadata = {
  _id: string;
  _type: "translation.metadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<{
    _key: string;
  } & InternationalizedArrayReferenceValue>;
  schemaTypes?: Array<string>;
};

export type InternationalizedArrayReferenceValue = {
  _type: "internationalizedArrayReferenceValue";
  value?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  content?: Array<{
    _key: string;
  } & HeroVideoBlock | {
    _key: string;
  } & HeroSearchBlock>;
  language?: string;
};

export type InternationalizedArrayReference = Array<{
  _key: string;
} & InternationalizedArrayReferenceValue>;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = LinkObject | HeroSearchBlock | ImageObject | TopPagesObject | HeroVideoBlock | VideoObject | HeadingObject | TranslationMetadata | InternationalizedArrayReferenceValue | Page | InternationalizedArrayReference | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: GET_PAGE_REFERENCE
// Query: *[_type == "page" && slug.current == $slug && language == $language][0]
export type GET_PAGE_REFERENCEResult = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  content?: Array<{
    _key: string;
  } & HeroSearchBlock | {
    _key: string;
  } & HeroVideoBlock>;
  language?: string;
} | null;
// Variable: GET_AVAILABLE_LANGUAGES
// Query: *[_type == "page"] | order(language asc) {    language  }
export type GET_AVAILABLE_LANGUAGESResult = Array<{
  language: string | null;
}>;
// Variable: GET_PAGES_BY_LANGUAGE
// Query: *[_type == "page" && language == $language] {    _id,    title,    slug,    language  }
export type GET_PAGES_BY_LANGUAGEResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  language: string | null;
}>;
// Variable: GET_ALL_HOMEPAGE_LANGUAGES
// Query: *[_type == "page" && slug.current == "home"] {    _id,    title,    slug,    language,    content  }
export type GET_ALL_HOMEPAGE_LANGUAGESResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  language: string | null;
  content: Array<{
    _key: string;
  } & HeroSearchBlock | {
    _key: string;
  } & HeroVideoBlock> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"page\" && slug.current == $slug && language == $language][0]\n": GET_PAGE_REFERENCEResult;
    "\n  *[_type == \"page\"] | order(language asc) {\n    language\n  }\n": GET_AVAILABLE_LANGUAGESResult;
    "\n  *[_type == \"page\" && language == $language] {\n    _id,\n    title,\n    slug,\n    language\n  }\n": GET_PAGES_BY_LANGUAGEResult;
    "\n  *[_type == \"page\" && slug.current == \"home\"] {\n    _id,\n    title,\n    slug,\n    language,\n    content\n  }\n": GET_ALL_HOMEPAGE_LANGUAGESResult;
  }
}
